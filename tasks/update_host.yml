---
- name: determine if this is a wordpress vhost
  stat:
    path: "{{ bu.stdout|trim }}/wp-config.php"
  register: wpsite

- block:

  - name: testing
    debug: msg="{{ wpsite }}"

  - name: borrow some vars
    shell: |
      grep -e '^define.*{{ item }}' {{ bu.stdout|trim }}/wp-config.php | cut -d "'" -f 4
    register: WPCONFIG
    become: yes
    loop:
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
    when: wpsite.stat.exists

  - name: Dump database
    mysql_db:
      state: dump
      name: "{{ WPCONFIG.results[0].stdout|trim }}"
      login_user: "{{ WPCONFIG.results[1].stdout|trim }}"
      login_password: "{{ WPCONFIG.results[2].stdout|trim }}"
      login_host: "{{ WPCONFIG.results[3].stdout|trim }}"
      target: "{{ bu.stdout|trim }}/../{{ WPCONFIG.results[0].stdout|trim }}.sql"
    become: yes
    when: wpsite.stat.exists and BACKUPALL is defined

  - name: backup everything
    archive:
      path:
      - "{{ bu.stdout|trim }}/../"
      dest: "{{ bu.stdout|trim }}/../{{ ansible_date_time.date }}-{{ WPCONFIG.results[0].stdout|trim }}.tar.bz2"
      format: bz2
    become: yes
    when: wpsite.stat.exists and BACKUPALL is defined

    # push to google drive
  - name: backup to google drive
    raw: |
      DATE=`date +"%Y-%m-%d"`
      WP_GROUP={{ WP_GROUP }}
      PLAYBOOK_DIR={{ playbook_dir }}
      WP_SITE=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 2)
      WP_USER=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 4 | cut -d '/' -f 3)
      WP_PATH=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 4)
      WP_USER_HOME="/home/$WP_USER"
      cd utilities/google-drive-upload/sh; ./upload.sh {{ bu.stdout|trim }}/../{{ ansible_date_time.date }}-{{ WPCONFIG.results[0].stdout|trim }}.tar.bz2 {{ FOLDERNAME }}; 
    when: wpsite.stat.exists and BACKUPALL is defined

  - name: delete db & archive files
    file:
      state: absent
      path: "{{ item }}"
    loop:
      - "{{ bu.stdout|trim }}/../{{ WPCONFIG.results[0].stdout|trim }}.sql"
      - "{{ bu.stdout|trim }}/../{{ ansible_date_time.date }}-{{ WPCONFIG.results[0].stdout|trim }}.tar.bz2"
    become: yes
    when: wpsite.stat.exists and BACKUPALL is defined

  - name: wp update plugins
    raw: |
      DATE=`date +"%Y-%m-%d"`
      WP_GROUP={{ WP_GROUP }}
      PLAYBOOK_DIR={{ playbook_dir }}
      WP_SITE=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 2)
      WP_USER=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 4 | cut -d '/' -f 3)
      WP_PATH=$(grep -oP '(ServerName.*|DocumentRoot.*)' {{ bu.item }} | sed ':a;N;$!ba;s/\n/ /g' | cut -d ' ' -f 4)
      WP_USER_HOME="/home/$WP_USER"
      sudo -u $WP_USER utilities/wp-cli/bin/wp plugin list --path=$WP_PATH | grep available 1>&2; WP_PLUGINS=$?;
      if [ "$WP_PLUGINS" -eq 0 ]; then sudo -u $WP_USER utilities/wp-cli/bin/wp plugin update --all --path=$WP_PATH; WP_UPDATE_PLUGINS=$?; fi
      if [ "$WP_PLUGINS" -eq 0 ] && [ "$WP_UPDATE_PLUGINS" -ne 0 ]; then sudo -u $WP_USER utilities/wp-cli/bin/wp plugin update --all --path=$WP_PATH --skip-themes | grep Error; FAIL=$?; fi
      if [ "$FAIL" -eq 0 ]; then FAIL=$(sudo -u $WP_USER utilities/wp-cli/bin/wp plugin update --all --path=$WP_PATH --all | grep Error); echo $FAIL | mailx -s "WP_Plugin Update fail for $WP_SITE" niles@atheos.net; fi

  when: wpsite.stat.exists is defined
